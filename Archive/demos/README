Demos
=====
Here are a number of demo scripts that show interesting behaviour or
demonstrate some purpose. Often they show the difference in performance
or time for different methods of doing the same thing.

- `shell_true_false.py`
- `builtin_extern.sh`
- `str-concat.lua`
- `date2secs.lua`
- `string_print.lua`
- `hash.lua`
- `get_year.lua`
- `min_max.lua`
- `string_find.lua`
- `string_letter_iterator.lua`
- `neighbours.lua`

`shell_true_false.py`
---------------------

Python can start an external command using the `subprocess.Popen(...)`
command. This takes an optional argument `shell` which is either `True`
or `False`.

When true, the shell is used to run the command, ie `sh -c cmd`, when
false, the command is run directly but the command must be passed as
a list with the command name itself as the first element and arguments
after.

This script shows the effect of shell being true vs false.

**Linux**

	Shell is True
	99
	Average time: 0.00100619530678
	Shell is False
	99
	Average time: 0.00113763618469


**Cygwin**

	Shell is True
	99
	Average time: 0.0242535800934
	Shell is False
	99
	Average time: 0.0195034759045


Interestingly, `shell=True` takes a shorter time under Linux, but a
longer time under cygwin.

`builtin_extern.sh`
-------------------

This script compares the effect of using bash builtin string manipulation
vs using calls to external programs. This is primarily aimed at showing
the effect of calling many external programs when running under cygwin
since the overhead of `fork()`ing there is much higher.

The script counts the number of newlines in a string, first by replacing
everything not a newline with nothing then counting the number of
characters and second by piping the string to `wc -l`.

**Linux**

	1000 : 6
	real    0m0.125s
	user    0m0.040s
	sys     0m0.008s
	1000 : 6
	real    0m1.853s
	user    0m0.048s
	sys     0m0.064s

**Cygwin**

	1000 : 6
	real    0m0.076s
	user    0m0.062s
	sys     0m0.000s
	1000 : 6
	real    0m43.631s
	user    0m6.101s
	sys     0m16.383s

The difference between builtin vs external calls is much smaller
under Linux, but it is still noticably faster to use shell builtin
functionality.

`str-concat.lua`
---------------

There are different ways of generating a string which is composed of
several pieces. This script shows the relative time to make a string
out of several components by:

1. explicitly concatenating them together with the lua `..`
   concatenation operator
2. use `table.concat` to join the table of components
3. use `sting.format` with a format string set.

```
n = 1000000
String concat: 0.234
Table concat: 0.468
String format: 1.31
```

The time to join the strings will depend on the strings themselves and
the number, but for this example, explicit is considerably faster.

`date2secs.lua`
--------------

Converting a string containing a date/time to seconds since the unix
epoch is really just a case of getting the right numbers for the right
positions in the string. Here, we test the speed of matching those
numbers vs just using the positions directly.

	n = 1000000
	Match: 0.624
	Match2: 0.561
	Sub: 0.546

Matching is marginally slower, but in many cases would provide the better
readability of the code so would be chosen. Selecting parts of the string
by index can quickly lead to unmaintainability.

`string_print.lua`
------------------

Printing a large amount of text has a performance impact. We have
the choice to either print the text as it is available, or to save it
together and print it all at once. Here, we test both, for a short and
for longer strings.

	str lenght = 1
	Immediate write: 0.998
	Table collect then write: 0.328

	str lenght = 1001
	Immediate write: 0.967
	Table collect then write: 2.06

For the case where the individual strings are short, it is faster to
store them up and print alogether. For longer strings, however, the
performace impact of creating the table with many large strings and then
concatenating them together becomes important.

`hash.lua`
----------

Implementation of some simple string hashing algorithms with demonstration
of the collision rate for a dictionary of strings.

`get_year.lua`
--------------

Comparison of three different methods of obtaining the current year
as an integer, returning a table of values and extracting the relavent
member, generating the year as a string and converting to a number or
manual calculation based on the number of seconds in a year. Each could
be modified to return other values.

	1487695221      2017, 2017, 2017
	date table:     1.232 seconds
	date tonumber:  0.718 seconds
	manual calc:    0.015 seconds

Cleary, the manual calcuation is easily the fastest. The date table has
to create a whole table of values just for the single interesting one,
so is inefficient. Using `tonumber()` is faster as only the relavent
value is created, but it does involve strings which slow it down. The
manual method is crude and approximate but very fast by comparison.

`min_max.lua`
-------------

Recording the current highest or lowest seen value is common when
iterating through an unsorted list. The different methods of checking
the new value against the current high/low value are tested here.

	Func global     1.154   10      10000000
	Func local      0.78    10      10000000
	Ternary         0.203   10      10000000
	Comparison      0.203   10      10000000

Making a global call the `math.min` or `math.max` is by far the slowest
due to the global variable lookup and the cost of the function call. The
added complexity of the approximated lua ternary expression
(`x = A and x or y`) does not add enough benefit. By far the fastest is
the simple `if` check.

`string_find.lua`
-----------------

In Lua, the `string.find()` function can be passed an option fourth
argument, `plain` which restricts the find operation to plain text (ignore
patterns). It is expected that the performance of a plain text search
is bettern than a pattern search when no patterns are being searched for.

	Patterns enabled        4.04
	Patterns disabled       3.697

`string_letter_iterator.lua`
----------------------------

To iterate through the letters in a string, a simple `for` loop using
`sub()` can be used, or the string functions `gmatch` or `gsub` can be
used with a pattern of a single character, `.`. The overhead from the
multiple function calls when using `gsub` makes it perform poorest. For
short strings, the `for` loop is marginally more performant than
`gmatch`. For longer strings, there is very little difference.

Short string:

	for loop        0.187
	gmatch          0.218
	gsub            0.343

Long string:

	gmatch          2.496
	for loop        2.776
	gsub            4.103

`neighbours.lua`
----------------

Simple demo using an algorithm to generate a set of random coordinates
that are evenly spaced apart from each other. Generates a number of
trail points, then works out which of those is the furthest away from
all of the existing points that have so been accepted.
